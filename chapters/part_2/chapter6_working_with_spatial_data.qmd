---
title: "Working with Spatial Data in ArcPy"
author: "Your Name"
format: html
jupyter: python3
---

# Working with Spatial Data in ArcPy

In this chapter, we will learn how to work with vector data (shapefiles and feature classes) using ArcPy.  
We will explore listing datasets, describing properties, and accessing geometry objects.

---

## Reading Shapefiles and Feature Classes

ArcPy can read shapefiles and feature classes stored in a folder or geodatabase.  
We can list available datasets using `arcpy.ListFeatureClasses()`.

```{python}
import arcpy

# Set workspace
arcpy.env.workspace = r"C:\GIS_Data"

# List all shapefiles/feature classes
feature_classes = arcpy.ListFeatureClasses()

print("Available feature classes:")
for fc in feature_classes:
    print("-", fc)
```

---

## Listing Datasets and Describing Properties

The `arcpy.Describe()` function provides details about a dataset, such as geometry type, spatial reference, and more.

```{python}
import arcpy

fc = "roads.shp"
desc = arcpy.Describe(fc)

print("Name:", desc.name)
print("Shape Type:", desc.shapeType)
print("Spatial Reference:", desc.spatialReference.name)
print("Path:", desc.catalogPath)
```

---

## Accessing Geometry Objects

ArcPy provides access to feature geometry (points, lines, polygons) using cursors.  

```{python}
import arcpy

fc = "villages.shp"

# Use a SearchCursor to access geometry
with arcpy.da.SearchCursor(fc, ["SHAPE@"]) as cursor:
    for row in cursor:
        geom = row[0]
        print("Feature type:", geom.type)
        print("Area:", geom.area)
        print("Length:", geom.length)
        break  # Print only the first feature for demo
```

---

## Practical Example: Count Features and Calculate Area

```{python}
import arcpy

fc = "villages.shp"

# Get feature count
count = arcpy.GetCount_management(fc)
print("Number of features:", count[0])

# Add a new field and calculate area
if "Area_Ha" not in [f.name for f in arcpy.ListFields(fc)]:
    arcpy.AddField_management(fc, "Area_Ha", "DOUBLE")

with arcpy.da.UpdateCursor(fc, ["SHAPE@", "Area_Ha"]) as cursor:
    for row in cursor:
        row[1] = row[0].area / 10000  # Convert mÂ² to hectares
        cursor.updateRow(row)

print("Area field updated successfully!")
```

---

## Summary

In this chapter, we learned:  
- How to list shapefiles and feature classes.  
- How to describe dataset properties using `arcpy.Describe()`.  
- How to access geometry objects with cursors.  
- A practical example of counting features and calculating area.  

---

## Exercise

Try the following tasks:  

1. Use `arcpy.ListFeatureClasses()` to list all shapefiles in a folder.  
2. Use `arcpy.Describe()` to find the spatial reference of a shapefile of your choice.  
3. Write a script that adds a new field to a shapefile and calculates perimeter (length).  

---
