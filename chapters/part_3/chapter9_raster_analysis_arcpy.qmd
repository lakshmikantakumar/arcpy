---
title: "Raster Analysis with ArcPy"
author: "Your Name"
format: html
jupyter: python3
---

# Raster Analysis with ArcPy

Raster data represents continuous surfaces such as elevation, temperature, or satellite imagery.  
ArcPy provides powerful tools for raster analysis through the **Spatial Analyst** extension (`arcpy.sa`).  

In this chapter, we will cover the basics of raster analysis with ArcPy.

---

## Raster Basics in ArcPy

We can access raster datasets using the `arcpy.Raster` class.  

```{python}
import arcpy

# Set workspace
arcpy.env.workspace = r"C:\GIS_Data"

# Load a raster
raster = arcpy.Raster("elevation.tif")

print("Raster Name:", raster.name)
print("Raster Width (cols):", raster.width)
print("Raster Height (rows):", raster.height)
print("Spatial Reference:", raster.spatialReference.name)
```

---

## Map Algebra with Spatial Analyst

ArcPy's Spatial Analyst module (`arcpy.sa`) supports **map algebra**, allowing raster calculations.  

```{python}
from arcpy.sa import *

# Example: calculate slope from elevation
elevation = Raster("elevation.tif")
slope = Slope(elevation)

slope.save("slope.tif")
print("Slope raster created!")
```

---

## Zonal Statistics

The **Zonal Statistics** tool summarizes raster values within zones defined by a vector dataset.  

```{python}
from arcpy.sa import *

# Zonal statistics: mean elevation by district
out_zonal = ZonalStatistics("districts.shp", "DIST_ID", "elevation.tif", "MEAN")
out_zonal.save("mean_elevation_by_district.tif")
print("Zonal statistics completed!")
```

---

## Reclassification

Reclassification assigns new values to raster cells based on ranges or categories.  

```{python}
from arcpy.sa import *

# Reclassify slope into categories
slope = Raster("slope.tif")
remap = RemapRange([[0, 5, 1], [5, 15, 2], [15, 90, 3]])

out_reclass = Reclassify(slope, "VALUE", remap)
out_reclass.save("slope_classes.tif")
print("Reclassification completed!")
```

---

## Practical Example: Extract NDVI Above Threshold

Suppose we have an NDVI raster and want to extract areas with NDVI above 0.4.  

```{python}
from arcpy.sa import *

ndvi = Raster("ndvi.tif")

# Extract NDVI values greater than 0.4
ndvi_high = ExtractByAttributes(ndvi, "VALUE > 0.4")
ndvi_high.save("ndvi_high.tif")

print("NDVI threshold extraction completed!")
```

---

## Summary

In this chapter, we learned:  
- How to load and inspect rasters in ArcPy.  
- How to perform **map algebra** using Spatial Analyst.  
- How to compute **zonal statistics**.  
- How to **reclassify** rasters.  
- A **practical example**: extract NDVI above a threshold.  

---

## Exercise

Try the following tasks:  

1. Load a DEM raster and calculate its slope and aspect.  
2. Perform zonal statistics to find maximum elevation in each district.  
3. Reclassify land cover raster into fewer categories (e.g., forest, agriculture, urban).  
4. Extract areas with NDVI less than 0.2.  

---
