# Python Basics

In this chapter, we will review the basic Python concepts needed for GIS scripting.  
Understanding these fundamentals will help you write more effective scripts in ArcGIS.  

---

## Variables and Data Types

A **variable** is a named storage that holds data in memory, which can be used and modified later.  
In Python, variables are created when you assign a value using the `=` operator.

### Rules for variable names
- Must start with a letter or underscore (`_`)  
- Cannot start with a number  
- Can only contain letters, numbers, and underscores  
- Case-sensitive (`Name`, `name`, and `NAME` are different variables)

---

### Common Python Data Types

- **int (Integer)** → whole numbers (e.g., `10`, `-5`, `2025`)  
- **float (Floating Point)** → decimal numbers (e.g., `3.14`, `-0.5`)  
- **str (String)** → text data (e.g., `"Hello GIS"`, `'ArcPy'`)  
- **list** → ordered collection of items (e.g., `[1, 2, 3, "ArcGIS"]`)
- **dict (Dictionary)** → key-value pairs (e.g., `{"name": "India", "population": 1400}`) 
- **bool (Boolean)** → True/False values (e.g., `True`, `False`)  

---

### Example: Declaring Variables

```{python}
# Integer
integer_num = 10

# Float
decimal_num = 3.14

# String
text_value = "Hello GIS"

# Boolean
is_active = True

# List
my_list = [1, 2, 3, "ArcGIS"]

# Dictionary
my_dict = {"name": "India", "population": 1400}

print(integer_num, type(integer_num))
print(decimal_num, type(decimal_num))
print(text_value, type(text_value))
print(is_active, type(is_active))
print(my_list, type(my_list))
print(my_dict, type(my_dict))

```

---

## Operators and Expressions

Operators allow us to perform operations on variables and values.

- Arithmetic Operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`  
- Comparison Operators: `==`, `!=`, `<`, `>`, `<=`, `>=`  
- Logical Operators: `and`, `or`, `not`  

```{python}
a = 15
b = 4

print("Addition:", a + b)
print("Division:", a / b)
print("Floor Division:", a // b)
print("Exponent:", a ** b)

print("Equal?", a == b)
print("Greater?", a > b)
print("Logical AND:", a > 10 and b < 10)

```

---

## Input/Output and Simple Programs

In interactive Python (like IDLE or terminal), you can take input with `input()`.  

```{python}
# Example: calculate area of a rectangle
# (In a real script, use: length = float(input("Enter length: ")))

length = 10.0   # pretend the user typed 10
width = 5.0     # pretend the user typed 5

area = length * width
print("The area of rectangle is:", area)

```

---

## Working with Strings

Strings are important in GIS because we often work with file paths, names, and attribute data.

```{python}
# String operations
path = "D:/GIS_Data/OSM/shape/roads.shp"

print("Length of string:", len(path))
print("Uppercase:", path.upper())
print("Does it end with .shp?", path.endswith(".shp"))
print("Replace extension:", path.replace(".shp", ".geojson"))

# Splitting file path
parts = path.split("\\")
print("Folder structure:", parts)

```

---

## Summary

In this chapter, we reviewed:  
- Variables and common data types in Python.  
- Basic operators and expressions.  
- Simple input/output programs.  
- String operations useful for GIS tasks.  

---

## Exercise

Try the following tasks:  

1. Create a dictionary with details of your city (name, population, state).  
2. Write a program that asks the user for two numbers and prints their sum and product.  
3. Modify a file path string to change the extension from `.tif` to `.jpg`.  

---
