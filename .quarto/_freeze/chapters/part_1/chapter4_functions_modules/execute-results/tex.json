{
  "hash": "7e97c47fd10c1b98f083bcb1be1ec786",
  "result": {
    "engine": "jupyter",
    "markdown": "# Functions and Modules in Python\n\nFunctions and modules allow us to organize and reuse code effectively.  \nInstead of writing the same code again and again, we can wrap logic inside a **function** or use a **module** (a collection of functions).  \n\nIn GIS scripting, functions help structure workflows (e.g., buffer → clip → calculate area), \nwhile modules provide useful tools for different tasks (e.g., file management with `os`, GIS tools with `arcpy`).\n\n---\n\n## Defining Functions\n\nA **function** is a block of code that runs only when it is called.  \nFunctions can:  \n\n- Take inputs (called **parameters**)  \n- Perform some operations  \n- Optionally return an output using the `return` statement  \n\nTo define a function in Python, we use the **`def` keyword** followed by:  \n1. The function name  \n2. Parentheses `()` (with parameters inside, if any)  \n3. A colon `:`  \n4. An indented block of code (the function body)  \n\n**General syntax:**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef function_name(parameters):\n    # code block\n    return result   # optional\n```\n:::\n\n\n## Defining Functions\n\nA **function** is a block of code that runs only when called. Functions can take inputs (parameters) and return outputs.\n\n### Example: A simple function\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Simple function without parameters\ndef say_hello():\n    print(\"Hello from Python!\")\n\nsay_hello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello from Python!\n```\n:::\n:::\n\n\n### Example: Function with parameters and return value\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef add_numbers(a, b):\n    \"\"\"This function takes two numbers and returns their sum.\"\"\"\n    result = a + b\n    return result\n\n# Call the function with arguments\nprint(\"Sum of 5 and 7 is:\", add_numbers(5, 7))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSum of 5 and 7 is: 12\n```\n:::\n:::\n\n\n### Example: Function with default parameters\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef greet(name=\"GIS Learner\"):\n    \"\"\"Greets the person with a default value if no name is provided.\"\"\"\n    print(\"Welcome,\", name)\n\ngreet(\"Lakshmi\")    # custom value\ngreet()             # uses default value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome, Lakshmi\nWelcome, GIS Learner\n```\n:::\n:::\n\n\n---\n\n## Using Modules in Python\n\nA **module** is a file that contains Python code (functions, classes, variables) which you can use in your programs.  \nInstead of writing everything yourself, you can **import** modules to get additional functionality.\n\n### Importing a Module\n\nWe use the **`import` keyword** to bring a module into our program.  \nYou can:  \n- Import the whole module → `import os`  \n- Import with an alias → `import numpy as np`  \n- Import specific functions → `from math import sqrt`  \n\n\n### Example: The `os` Module (Operating System)\n\nThe `os` module provides functions to interact with the operating system:  \n- Work with files and directories  \n- Join paths in a cross-platform way  \n- Check if files exist  \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport os\n\npath = \"D:/GIS_Data/OSM/shape/roads.shp\"\n\nprint(\"File name:\", os.path.basename(path))\nprint(\"Directory:\", os.path.dirname(path))\nprint(\"Does file exist?\", os.path.exists(path))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile name: roads.shp\nDirectory: D:/GIS_Data/OSM/shape\nDoes file exist? True\n```\n:::\n:::\n\n\n---\n\n## Importing ArcPy in Scripts\n\nArcPy is a powerful library for GIS tasks in ArcGIS.  \nYou can import it into your script like any other module.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport arcpy\n\n# Check ArcPy version\ninfo = arcpy.GetInstallInfo()\nprint(\"ArcPy Installed with ArcGIS Version:\", info[\"Version\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArcPy Installed with ArcGIS Version: 3.4\n```\n:::\n:::\n\n\n---\n\n## Example: A Simple Buffer Function\n\nLet’s create a function that performs a **buffer operation** on a shapefile.  \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport arcpy\n\ndef buffer_features(input_fc, output_fc, distance):\n    \"\"\"Creates a buffer around input features.\n    \n    Parameters:\n        input_fc (str): Input feature class (shapefile/FC)\n        output_fc (str): Output feature class path\n        distance (str): Buffer distance (e.g., \"50 Meters\")\n    \"\"\"\n    arcpy.analysis.Buffer(input_fc, output_fc, distance)\n    print(f\"Buffer created: {output_fc}\")\n\n# Example usage (adjust file paths as needed)\narcpy.env.workspace = r\"D:/GIS_Data/OSM/shape\"\nbuffer_features(\"roads_utm44n.shp\", \"roads_buffer_1.shp\", \"50 Meters\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nExecuteError: Failed to execute. Parameters are not valid.\nERROR 000725: Output Feature Class: Dataset D:/GIS_Data/OSM/shape/roads_buffer_1.shp already exists.\nFailed to execute (Buffer).\n\n\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mExecuteError\u001b[0m                              Traceback (most recent call last)\nCell \u001b[1;32mIn[7], line 16\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[38;5;66;03m# Example usage (adjust file paths as needed)\u001b[39;00m\n\u001b[0;32m     15\u001b[0m arcpy\u001b[38;5;241m.\u001b[39menv\u001b[38;5;241m.\u001b[39mworkspace \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mD:/GIS_Data/OSM/shape\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m---> 16\u001b[0m buffer_features(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mroads_utm44n.shp\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mroads_buffer_1.shp\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m50 Meters\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\nCell \u001b[1;32mIn[7], line 11\u001b[0m, in \u001b[0;36mbuffer_features\u001b[1;34m(input_fc, output_fc, distance)\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mbuffer_features\u001b[39m(input_fc, output_fc, distance):\n\u001b[0;32m      4\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Creates a buffer around input features.\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;124;03m    \u001b[39;00m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;124;03m    Parameters:\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[38;5;124;03m        distance (str): Buffer distance (e.g., \"50 Meters\")\u001b[39;00m\n\u001b[0;32m     10\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m---> 11\u001b[0m     arcpy\u001b[38;5;241m.\u001b[39manalysis\u001b[38;5;241m.\u001b[39mBuffer(input_fc, output_fc, distance)\n\u001b[0;32m     12\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBuffer created: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00moutput_fc\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\nFile \u001b[1;32m~\\AppData\\Local\\Programs\\ArcGIS\\Pro\\Resources\\ArcPy\\arcpy\\analysis.py:1699\u001b[0m, in \u001b[0;36mBuffer\u001b[1;34m(in_features, out_feature_class, buffer_distance_or_field, line_side, line_end_type, dissolve_option, dissolve_field, method)\u001b[0m\n\u001b[0;32m   1697\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m retval\n\u001b[0;32m   1698\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m-> 1699\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\n\nFile \u001b[1;32m~\\AppData\\Local\\Programs\\ArcGIS\\Pro\\Resources\\ArcPy\\arcpy\\analysis.py:1681\u001b[0m, in \u001b[0;36mBuffer\u001b[1;34m(in_features, out_feature_class, buffer_distance_or_field, line_side, line_end_type, dissolve_option, dissolve_field, method)\u001b[0m\n\u001b[0;32m   1677\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01marcpy\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marcobjects\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marcobjectconversion\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m convertArcObjectToPythonObject\n\u001b[0;32m   1679\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1680\u001b[0m     retval \u001b[38;5;241m=\u001b[39m convertArcObjectToPythonObject(\n\u001b[1;32m-> 1681\u001b[0m         gp\u001b[38;5;241m.\u001b[39mBuffer_analysis(\n\u001b[0;32m   1682\u001b[0m             \u001b[38;5;241m*\u001b[39mgp_fixargs(\n\u001b[0;32m   1683\u001b[0m                 (\n\u001b[0;32m   1684\u001b[0m                     in_features,\n\u001b[0;32m   1685\u001b[0m                     out_feature_class,\n\u001b[0;32m   1686\u001b[0m                     buffer_distance_or_field,\n\u001b[0;32m   1687\u001b[0m                     line_side,\n\u001b[0;32m   1688\u001b[0m                     line_end_type,\n\u001b[0;32m   1689\u001b[0m                     dissolve_option,\n\u001b[0;32m   1690\u001b[0m                     dissolve_field,\n\u001b[0;32m   1691\u001b[0m                     method,\n\u001b[0;32m   1692\u001b[0m                 ),\n\u001b[0;32m   1693\u001b[0m                 \u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m   1694\u001b[0m             )\n\u001b[0;32m   1695\u001b[0m         )\n\u001b[0;32m   1696\u001b[0m     )\n\u001b[0;32m   1697\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m retval\n\u001b[0;32m   1698\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\nFile \u001b[1;32m~\\AppData\\Local\\Programs\\ArcGIS\\Pro\\Resources\\ArcPy\\arcpy\\geoprocessing\\_base.py:532\u001b[0m, in \u001b[0;36mGeoprocessor.__getattr__.<locals>.<lambda>\u001b[1;34m(*args)\u001b[0m\n\u001b[0;32m    530\u001b[0m val \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_gp, attr)\n\u001b[0;32m    531\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(val):\n\u001b[1;32m--> 532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mlambda\u001b[39;00m \u001b[38;5;241m*\u001b[39margs: val(\u001b[38;5;241m*\u001b[39mgp_fixargs(args, \u001b[38;5;28;01mTrue\u001b[39;00m))\n\u001b[0;32m    533\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    534\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m convertArcObjectToPythonObject(val)\n\n\u001b[1;31mExecuteError\u001b[0m: Failed to execute. Parameters are not valid.\nERROR 000725: Output Feature Class: Dataset D:/GIS_Data/OSM/shape/roads_buffer_1.shp already exists.\nFailed to execute (Buffer).\n```\n:::\n:::\n\n\n---\n\n## Summary\n\nIn this chapter, we learned:  \n- How to define and use **functions**.  \n- How to use built-in modules like **os** and **sys**.  \n- How to import and use **ArcPy** in scripts.  \n- How to write a **buffer function** for automation.  \n\n---\n\n## Exercise\n\nTry the following tasks:  \n\n1. Write a function that calculates the area of a rectangle (length × width).  \n2. Use the `os` module to list all files in a folder of your choice.  \n3. Modify the buffer function to accept multiple shapefiles and create buffers for each one.  \n\n---\n\n",
    "supporting": [
      "chapter4_functions_modules_files\\figure-pdf"
    ],
    "filters": []
  }
}