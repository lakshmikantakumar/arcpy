{
  "hash": "4a25334a5bc9b6c572d8f9ed8c496f5a",
  "result": {
    "engine": "jupyter",
    "markdown": "# Error Handling and Exceptions\n\nWhen writing Python scripts, errors are inevitable. For example, a file might be missing, a dataset may not load correctly, or a user may type the wrong parameter.  \nPython provides a mechanism called **exceptions** to handle such errors gracefully instead of letting the program crash.\n\nIn GIS scripting with ArcPy, error handling is especially important because geoprocessing tools often fail if inputs are invalid or if files already exist.\n\n---\n\n## What is an Exception?\n\nAn **exception** is an error that occurs during program execution.  \nCommon Python exceptions include:\n\n- `FileNotFoundError` â†’ File does not exist  \n- `ZeroDivisionError` â†’ Division by zero  \n- `ValueError` â†’ Wrong value or data type  \n- `TypeError` â†’ Wrong data type in operation  \n- `arcpy.ExecuteError` â†’ ArcPy tool execution failed  \n\n---\n\n## The tryâ€“except Block\n\nWe can use a **tryâ€“except** block to catch and handle exceptions.\n\n::: {#fa052c0a .cell execution_count=1}\n``` {.python .cell-code}\ntry:\n    x = 10 / 0   # This will cause ZeroDivisionError\nexcept ZeroDivisionError:\n    print(\"You cannot divide by zero!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou cannot divide by zero!\n```\n:::\n:::\n\n\n---\n\n## Handling Multiple Exceptions\n\nWe can catch different exceptions with multiple `except` blocks.\n\n::: {#9be7fe8d .cell execution_count=2}\n``` {.python .cell-code}\ntry:\n    number = int(\"abc\")   # This will cause ValueError\nexcept ValueError:\n    print(\"Invalid number!\")\nexcept TypeError:\n    print(\"Type error occurred!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInvalid number!\n```\n:::\n:::\n\n\n---\n\n## Using finally\n\nThe `finally` block always runs, whether an error occurred or not.  \nIt is useful for cleanup (closing files, releasing resources, etc.).\n\n::: {#8b79c4af .cell execution_count=3}\n``` {.python .cell-code}\ntry:\n    file = open(\"data.txt\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"File not found!\")\nfinally:\n    print(\"This block always executes.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile not found!\nThis block always executes.\n```\n:::\n:::\n\n\n---\n\n## Raising Exceptions\n\nSometimes we want to raise an exception intentionally if something is wrong.\n\n::: {#d47b5330 .cell execution_count=4}\n``` {.python .cell-code}\ndef calculate_area(length, width):\n    if length <= 0 or width <= 0:\n        raise ValueError(\"Length and width must be positive numbers\")\n    return length * width\n\n# Uncomment below to test\n# print(calculate_area(-5, 10))\n```\n:::\n\n\n---\n\n## Error Handling in ArcPy\n\nArcPy provides a special exception called **`arcpy.ExecuteError`**, which is raised when a geoprocessing tool fails.\n\n::: {#cb1d9186 .cell execution_count=5}\n``` {.python .cell-code}\nimport arcpy\n\narcpy.env.workspace = r\"D:/GIS_Data/OSM/shape\"\ntry:\n    # Try running a buffer on a non-existent dataset\n    arcpy.Buffer_analysis(\"non_existent.shp\", \"output.shp\", \"50 Meters\")\nexcept arcpy.ExecuteError:\n    print(\"ArcPy tool failed:\", arcpy.GetMessages(2))  # Get error messages\nexcept Exception as e:\n    print(\"Unexpected error:\", e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArcPy tool failed: Failed to execute. Parameters are not valid.\nERROR 000732: Input Features: Dataset non_existent.shp does not exist or is not supported\nFailed to execute (Buffer).\n\n```\n:::\n:::\n\n\n---\n\n## Practical Example: Safe Buffer Script\n\n::: {#7e9dd303 .cell execution_count=6}\n``` {.python .cell-code}\nimport arcpy\n\ndef safe_buffer(input_fc, output_fc, distance):\n    try:\n        arcpy.Buffer_analysis(input_fc, output_fc, distance)\n        print(f\"Buffer created: {output_fc}\")\n    except arcpy.ExecuteError:\n        print(\"Buffer tool failed:\", arcpy.GetMessages(2))\n    except Exception as e:\n        print(\"Unexpected error:\", e)\n\n# Example usage\nsafe_buffer(\"roads.shp\", \"roads_buffer.shp\", \"50 Meters\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuffer created: roads_buffer.shp\n```\n:::\n:::\n\n\n---\n\n## Common Exceptions Reference Table\n\n| Exception Type        | Description | GIS/ArcPy Example |\n|-----------------------|-------------|-------------------|\n| `FileNotFoundError`   | File or directory not found | Trying to open a missing shapefile |\n| `PermissionError`     | No permission to read/write | Attempting to overwrite a locked file |\n| `ZeroDivisionError`   | Division by zero | Calculating density with area = 0 |\n| `ValueError`          | Wrong value or type | Passing a string instead of a number |\n| `TypeError`           | Operation on wrong type | Adding a string and an integer |\n| `IndexError`          | Index out of range | Accessing a list element that does not exist |\n| `KeyError`            | Key not found in dictionary | Accessing a missing field in a dict |\n| `MemoryError`         | Out of memory | Processing very large raster in memory |\n| `arcpy.ExecuteError`  | ArcPy tool execution failed | Buffer or Clip failed due to bad input |\n| `arcpy.ExecuteWarning`| Tool ran with warnings | Projection mismatch, empty outputs |\n\nðŸ’¡ Keep this table handy when debugging scripts. Most issues in Python or ArcPy will map to one of these exceptions.\n\n---\n\n## Summary\n\nIn this chapter, we learned:  \n- What exceptions are and why they occur.  \n- How to use **tryâ€“exceptâ€“finally** for error handling.  \n- How to raise exceptions deliberately.  \n- How to handle **ArcPy errors** with `arcpy.ExecuteError`.  \n- A practical GIS example: a safe buffer script with error handling.  \n- A quick reference table of **common exceptions** in Python and ArcPy.  \n\n---\n\n## Exercises\n\n1. Write a function that divides two numbers and uses `tryâ€“except` to avoid division by zero.  \n2. Modify the safe buffer script to check if the output file already exists. If it does, print a warning instead of overwriting.  \n3. Use `arcpy.Clip_analysis()` in a tryâ€“except block and handle both ArcPy errors and general exceptions.  \n\n---\n\n",
    "supporting": [
      "chapter5_error_handling_exceptions_files"
    ],
    "filters": [],
    "includes": {}
  }
}