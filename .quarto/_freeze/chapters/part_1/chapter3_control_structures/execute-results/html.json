{
  "hash": "0fed9fb85b9dcd6bffc0e8838bdff3d0",
  "result": {
    "engine": "jupyter",
    "markdown": "# Control Structures in Python\n\nControl structures are used to control the flow of a program.  \nIn this chapter, we will learn about conditional statements and loops, which are essential for automating GIS tasks.\n\n---\n\n## If-Else Conditions\n\nThe **if-else** statement is used to make decisions in a program.\n\n::: {#a9f6d4be .cell execution_count=1}\n``` {.python .cell-code}\nx = 20\n\nif x > 10:\n    print(\"x is greater than 10\")\nelse:\n    print(\"x is 10 or less\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than 10\n```\n:::\n:::\n\n\nWe can also use **elif** for multiple conditions.\n\n::: {#5b5c6797 .cell execution_count=2}\n``` {.python .cell-code}\nvalue = 0\n\nif value > 0:\n    print(\"Positive number\")\nelif value < 0:\n    print(\"Negative number\")\nelse:\n    print(\"Zero\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZero\n```\n:::\n:::\n\n\n---\n\n## Loops: For and While\n\nLoops help us repeat a block of code multiple times.\n\n### For Loop\n\nA **for loop** iterates over a sequence (list, range, string, etc.) and executes code for each item.\n\n::: {#c9f7b320 .cell execution_count=3}\n``` {.python .cell-code}\n# Print numbers 1 to 5\nfor i in range(1, 6):\n    print(\"Number:\", i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber: 1\nNumber: 2\nNumber: 3\nNumber: 4\nNumber: 5\n```\n:::\n:::\n\n\n### While Loop\n\nA **while loop** executes code as long as a given condition is True.\n\n::: {#65cf3078 .cell execution_count=4}\n``` {.python .cell-code}\n# Print numbers until condition is met\nn = 1\nwhile n <= 5:\n    print(\"n =\", n)\n    n += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn = 1\nn = 2\nn = 3\nn = 4\nn = 5\n```\n:::\n:::\n\n\n---\n\n## Iterating Over Lists and Dictionaries\n\nWe often need to loop through collections of data.\n\n### Looping Over a List\n\n::: {#fc5f78b6 .cell execution_count=5}\n``` {.python .cell-code}\nlayers = [\"roads.shp\", \"rivers.shp\", \"villages.shp\"]\n\nfor layer in layers:\n    print(\"Processing:\", layer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProcessing: roads.shp\nProcessing: rivers.shp\nProcessing: villages.shp\n```\n:::\n:::\n\n\n### Looping Over a Dictionary\n\n::: {#06538579 .cell execution_count=6}\n``` {.python .cell-code}\ncity = {\"name\": \"Delhi\", \"population\": 19000000, \"country\": \"India\"}\n\nfor key, value in city.items():\n    print(key, \":\", value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname : Delhi\npopulation : 19000000\ncountry : India\n```\n:::\n:::\n\n\n---\n\n## Practical Example: Looping Over Shapefile Names in a Folder\n\nIn GIS automation, we often need to process multiple shapefiles.  \nThis example demonstrates looping through shapefiles using ArcPy.\n\n::: {#dd87ca94 .cell execution_count=7}\n``` {.python .cell-code}\nimport arcpy\n\n# Set workspace folder containing shapefiles\narcpy.env.workspace = r\"D:/GIS_Data/OSM/shape\"\n\n# List all shapefiles in the folder\nshapefiles = arcpy.ListFeatureClasses()\n\nfor shp in shapefiles:\n    print(\"Shapefile found:\", shp)\n    # Example: describe each shapefile\n    desc = arcpy.Describe(shp)\n    print(\" - Shape Type:\", desc.shapeType)\n    print(\" - Feature Count:\", arcpy.GetCount_management(shp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShapefile found: buildings.shp\n - Shape Type: Polygon\n - Feature Count: 19884\nShapefile found: landuse.shp\n - Shape Type: Polygon\n - Feature Count: 43\nShapefile found: natural.shp\n - Shape Type: Polygon\n - Feature Count: 16\nShapefile found: places.shp\n - Shape Type: Point\n - Feature Count: 55\nShapefile found: points.shp\n - Shape Type: Point\n - Feature Count: 344\nShapefile found: railways.shp\n - Shape Type: Polyline\n - Feature Count: 84\nShapefile found: roads.shp\n - Shape Type: Polyline\n - Feature Count: 2826\nShapefile found: roads_buffer.shp\n - Shape Type: Polygon\n - Feature Count: 2826\nShapefile found: roads_buffer_1.shp\n - Shape Type: Polygon\n - Feature Count: 2826\nShapefile found: roads_buffer_alias_style.shp\n - Shape Type: Polygon\n - Feature Count: 2826\nShapefile found: roads_buffer_clipped.shp\n - Shape Type: Polygon\n - Feature Count: 1864\nShapefile found: roads_buffer_module_style.shp\n - Shape Type: Polygon\n - Feature Count: 2826\nShapefile found: roads_final.shp\n - Shape Type: Polygon\n - Feature Count: 39\nShapefile found: roads_utm44n.shp\n - Shape Type: Polyline\n - Feature Count: 2826\nShapefile found: waterways.shp\n - Shape Type: Polyline\n - Feature Count: 18\nShapefile found: zones.shp\n - Shape Type: Polygon\n - Feature Count: 4\nShapefile found: zones_dissolved.shp\n - Shape Type: Polygon\n - Feature Count: 1\nShapefile found: zones_utm.shp\n - Shape Type: Polygon\n - Feature Count: 4\n```\n:::\n:::\n\n\n---\n\n## Summary\n\nIn this chapter, we learned:  \n\n- How to use **if-else conditions**.  \n- How to write **for** and **while** loops.  \n- How to iterate through **lists** and **dictionaries**.  \n- A practical example of looping through shapefiles in a folder.  \n\n---\n\n## Exercise\n\nTry the following tasks:  \n\n1. Write a program that checks whether a number entered by the user is even or odd.  \n2. Create a list of five file names and use a loop to print each one.  \n3. Modify the ArcPy script to print only polygon shapefiles from a folder.  \n\n---\n\n",
    "supporting": [
      "chapter3_control_structures_files"
    ],
    "filters": [],
    "includes": {}
  }
}