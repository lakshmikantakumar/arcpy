{
  "hash": "431a624ee8bf60e5114aac45b38f4531",
  "result": {
    "engine": "jupyter",
    "markdown": "# Python Basics\n\nIn this chapter, we will review the basic Python concepts needed for GIS scripting.  \nUnderstanding these fundamentals will help you write more effective scripts in ArcGIS.  \n\n---\n\n## Variables and Data Types\n\nA **variable** is a named storage that holds data in memory, which can be used and modified later.  \nIn Python, variables are created when you assign a value using the `=` operator.\n\n### Rules for variable names\n- Must start with a letter or underscore (`_`)  \n- Cannot start with a number  \n- Can only contain letters, numbers, and underscores  \n- Case-sensitive (`Name`, `name`, and `NAME` are different variables)\n\n---\n\n### Common Python Data Types\n\n- **int (Integer)** → whole numbers (e.g., `10`, `-5`, `2025`)  \n- **float (Floating Point)** → decimal numbers (e.g., `3.14`, `-0.5`)  \n- **str (String)** → text data (e.g., `\"Hello GIS\"`, `'ArcPy'`)  \n- **list** → ordered collection of items (e.g., `[1, 2, 3, \"ArcGIS\"]`)\n- **dict (Dictionary)** → key-value pairs (e.g., `{\"name\": \"India\", \"population\": 1400}`) \n- **bool (Boolean)** → True/False values (e.g., `True`, `False`)  \n\n---\n\n### Example: Declaring Variables\n\n::: {#206e079a .cell execution_count=1}\n``` {.python .cell-code}\n# Integer\ninteger_num = 10\n\n# Float\ndecimal_num = 3.14\n\n# String\ntext_value = \"Hello GIS\"\n\n# Boolean\nis_active = True\n\n# List\nmy_list = [1, 2, 3, \"ArcGIS\"]\n\n# Dictionary\nmy_dict = {\"name\": \"India\", \"population\": 1400}\n\nprint(integer_num, type(integer_num))\nprint(decimal_num, type(decimal_num))\nprint(text_value, type(text_value))\nprint(is_active, type(is_active))\nprint(my_list, type(my_list))\nprint(my_dict, type(my_dict))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 <class 'int'>\n3.14 <class 'float'>\nHello GIS <class 'str'>\nTrue <class 'bool'>\n[1, 2, 3, 'ArcGIS'] <class 'list'>\n{'name': 'India', 'population': 1400} <class 'dict'>\n```\n:::\n:::\n\n\n---\n\n## Operators and Expressions\n\nOperators allow us to perform operations on variables and values.\n\n- Arithmetic Operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`  \n- Comparison Operators: `==`, `!=`, `<`, `>`, `<=`, `>=`  \n- Logical Operators: `and`, `or`, `not`  \n\n::: {#c000199a .cell execution_count=2}\n``` {.python .cell-code}\na = 15\nb = 4\n\nprint(\"Addition:\", a + b)\nprint(\"Division:\", a / b)\nprint(\"Floor Division:\", a // b)\nprint(\"Exponent:\", a ** b)\n\nprint(\"Equal?\", a == b)\nprint(\"Greater?\", a > b)\nprint(\"Logical AND:\", a > 10 and b < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddition: 19\nDivision: 3.75\nFloor Division: 3\nExponent: 50625\nEqual? False\nGreater? True\nLogical AND: True\n```\n:::\n:::\n\n\n---\n\n## Input/Output and Simple Programs\n\nIn interactive Python (like IDLE or terminal), you can take input with `input()`.  \n\n::: {#144bfae0 .cell execution_count=3}\n``` {.python .cell-code}\n# Example: calculate area of a rectangle\n# (In a real script, use: length = float(input(\"Enter length: \")))\n\nlength = 10.0   # pretend the user typed 10\nwidth = 5.0     # pretend the user typed 5\n\narea = length * width\nprint(\"The area of rectangle is:\", area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe area of rectangle is: 50.0\n```\n:::\n:::\n\n\n---\n\n## Working with Strings\n\nStrings are important in GIS because we often work with file paths, names, and attribute data.\n\n::: {#30555af9 .cell execution_count=4}\n``` {.python .cell-code}\n# String operations\npath = \"D:/GIS_Data/OSM/shape/roads.shp\"\n\nprint(\"Length of string:\", len(path))\nprint(\"Uppercase:\", path.upper())\nprint(\"Does it end with .shp?\", path.endswith(\".shp\"))\nprint(\"Replace extension:\", path.replace(\".shp\", \".geojson\"))\n\n# Splitting file path\nparts = path.split(\"\\\\\")\nprint(\"Folder structure:\", parts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLength of string: 31\nUppercase: D:/GIS_DATA/OSM/SHAPE/ROADS.SHP\nDoes it end with .shp? True\nReplace extension: D:/GIS_Data/OSM/shape/roads.geojson\nFolder structure: ['D:/GIS_Data/OSM/shape/roads.shp']\n```\n:::\n:::\n\n\n---\n\n## Summary\n\nIn this chapter, we reviewed:  \n- Variables and common data types in Python.  \n- Basic operators and expressions.  \n- Simple input/output programs.  \n- String operations useful for GIS tasks.  \n\n---\n\n## Exercise\n\nTry the following tasks:  \n\n1. Create a dictionary with details of your city (name, population, state).  \n2. Write a program that asks the user for two numbers and prints their sum and product.  \n3. Modify a file path string to change the extension from `.tif` to `.jpg`.  \n\n---\n\n",
    "supporting": [
      "chapter2_python_basics_refresher_files"
    ],
    "filters": [],
    "includes": {}
  }
}